<!-- vim: set expandtab ts=4 sw=4 : -->
<project basedir="..">

    <taskdef resource="net/sf/antcontrib/antlib.xml" />

    <condition property="openwhisk.home" value="${basedir}">
        <not>
            <isset property="openwhisk.home" />
        </not>
    </condition>

    <!-- required properties with default values -->
    <!-- where all build artifacts go -->
    <property name="build.dir" value="${openwhisk.home}/build" />
    <property name="cli.build.dir" value="${openwhisk.home}/build/tools/cli" />
    <property name="go-cli.build.dir" value="${openwhisk.home}/build/tools/go-cli" />
    <property name="go-cli.src.dir" value="${openwhisk.home}/tools/go-cli" />
    <property name="blackbox.build.dir" value="${openwhisk.home}/build/tools/blackbox" />
    <property name="iosstarterapp.build.dir" value="${openwhisk.home}/build/tools/iosstarterapp" />

    <!-- derived properties -->
    <property name="docker.scratch" value="${build.dir}/docker-scratch" />

    <!-- import optional config for any properties which -->
    <!-- can be override by custom settings; a sample    -->
    <!-- custom-config.xml would look like this:         -->
    <!-- <project>
            <property name="buildthreads" value="4" />
            <property name="testthreads" value="3" />
         </project>
    -->
    <import file="custom-config.xml" optional="true" />

    <!-- parallel test threads for running junit: optional. -->
    <condition property="testthreads" value="1">
        <not>
            <isset property="testthreads" />
        </not>
    </condition>

    <!-- whether test tasks fail if any test fails: optional, default: false
         must be set explicitly to "true" if desired -->
    <condition property="testsfailonfailure" value="false">
        <not>
            <isset property="testsfailonfailure" />
        </not>
    </condition>

    <!-- parallel build threads. -->
    <condition property="buildthreads" value="1">
        <not>
            <isset property="buildthreads" />
        </not>
    </condition>

    <!-- parallel docker push threads. -->
    <condition property="pushthreads" value="1">
        <not>
            <isset property="pushthreads" />
        </not>
    </condition>

    <!-- parallel deploy threads. -->
    <condition property="deploythreads" value="1">
        <not>
            <isset property="deploythreads" />
        </not>
    </condition>

    <!-- optional properties with default values that can be set on command line -->
    <!-- whisk test prefix to run -->
    <property name="whisktests.prefix" value="" />

    <!-- docker images tagged as latest by default-->
    <property name="docker.image.tag" value="latest" />

    <!-- default timeout for docker commands -->
    <condition property="docker.timeout.short" value="60">
        <not>
            <isset property="docker.timeout.short" />
        </not>
    </condition>

    <condition property="docker.timeout.long" value="240">
        <not>
            <isset property="docker.timeout.long" />
        </not>
    </condition>

    <!-- mounting directive for docker run commands -->
    <condition property="docker.timezone.mount" value="-v /etc/localtime:/etc/localtime:ro -v /etc/timezone:/etc/timezone:ro" else=" ">
        <available file="/etc/timezone" />
    </condition>

    <property name="docker.syslog.driver" value="--log-driver=syslog" />

    <property name="consul.ignore.service" value="-e SERVICE_IGNORE=true" />
    <!-- set the environment variable to do health check on /ping -->
    <property name="consul.service.check" value="-e SERVICE_CHECK_HTTP=/ping -e SERVICE_CHECK_TIMEOUT=2s -e SERVICE_CHECK_INTERVAL=15s" />

    <!-- gather values for environment variables and store them in a properties file -->
    <target name="writePropertyFile" depends="setDeployTarget" unless="property.file.written">
        <exec dir="ansible" executable="ansible-playbook" failonerror="true">
            <env key="OPENWHISK_HOME" value="${openwhisk.home}" />
            <arg value="-i" />
            <arg value="environments/${deploy.target}" />
            <arg value="properties.yml" />
        </exec>
        <property name="property.file.written" value="true" />
    </target>

    <!-- deperacated: preserved for ant to ansible transition -->
    <target name="writePropertyFile-legacy" depends="setDeployTarget" unless="property.file.written">
        <exec dir="config" failonerror="true" executable="/bin/bash">
            <env key="OPENWHISK_HOME" value="${openwhisk.home}" />
            <env key="DOCKER_IMAGE_TAG" value="${docker.image.tag}" />
            <arg value="setupProps.sh" />
            <arg value="${deploy.target}Env.sh" />
        </exec>
        <property name="property.file.written" value="true" />
    </target>

    <!-- if the deploy.target variable is not yet set, set it -->
    <target name="setDeployTarget" unless="deploy.target">
        <condition property="deploy.target" value="local">
            <os name="Linux" />
        </condition>

        <condition property="deploy.target" value="mac">
            <os name="Mac OS X" />
        </condition>

        <fail message="deploy target is not supported for OS '${os.name}'.">
            <condition>
                <not>
                    <isset property="deploy.target" />
                </not>
            </condition>
        </fail>

        <echo message="deploy target: ${deploy.target}" />
    </target>


    <!-- derived properties -->
    <target name="initScalaLocation">
        <!-- Set scala.home property. -->
        <if>
            <not>
                <isset property="scala.home" />
            </not>
            <then>
                <!-- ubuntu -->
                <available file="/usr/share/scala" property="scala.home" value="/usr/share/scala" />
            </then>
        </if>
        <if>
            <not>
                <isset property="scala.home" />
            </not>
            <then>
                <!-- centos -->
                <available file="/usr/lib/scala" property="scala.home" value="/usr/lib/scala" />
            </then>
        </if>
        <if>
            <not>
                <isset property="scala.home" />
            </not>
            <then>
                <!-- Works for homebrew installation. -->
                <available file="/usr/local/opt/scala" property="scala.home" value="/usr/local/opt/scala" />
            </then>
        </if>

        <!-- Set scala.lib property. -->
        <if>
            <not>
                <isset property="scala.lib" />
            </not>
            <then>
                <available file="${scala.home}/lib" property="scala.lib" value="${scala.home}/lib" />
            </then>
        </if>
        <if>
            <not>
                <isset property="scala.lib" />
            </not>
            <then>
                <!-- Works for homebrew installation. -->
                <available file="${scala.home}/libexec/lib" property="scala.lib" value="${scala.home}/libexec/lib" />
            </then>
        </if>
    </target>

    <!-- initilizes scala classpath and imports scala ant tasks -->
    <target name="initScala" depends="initScalaLocation">
        <property name="scala-library.jar" value="${scala.lib}/scala-library.jar" />
        <property name="scala-reflect.jar" value="${scala.lib}/scala-reflect.jar" />
        <path id="scala.build.classpath">
            <pathelement location="${scala-library.jar}" />
        </path>
        <taskdef resource="scala/tools/ant/antlib.xml">
            <classpath>
                <pathelement location="${scala.lib}/scala-compiler.jar" />
                <pathelement location="${scala-library.jar}" />
                <pathelement location="${scala-reflect.jar}" />
            </classpath>
        </taskdef>
    </target>

</project>
