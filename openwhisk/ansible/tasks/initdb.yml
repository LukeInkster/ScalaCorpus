---
# This task will initialize the immortal DBs in the database account.
# This step is usually done only once per account.

- name: check if the immortal {{ db_auth }} db with {{ db_provider }} exists?
  uri:
    url: "{{ db_protocol }}://{{ db_host }}:{{ db_port }}/{{ db_auth }}"
    method: GET
    status_code: 200,404
    user: "{{ db_username }}"
    password: "{{ db_password }}"
    force_basic_auth: yes
  register: result

# create only the missing db_auth
- name: create immortal {{ db_auth }} db with {{ db_provider }}
  uri:
    url: "{{ db_protocol }}://{{ db_host }}:{{ db_port }}/{{ db_auth }}"
    method: PUT
    status_code: 200,201
    user: "{{ db_username }}"
    password: "{{ db_password }}"
    force_basic_auth: yes
  when: result.status == 404

- name: recreate the "full" index on the "auth" database
  vars:
    auth_index: "{{ lookup('file', '{{ openwhisk_home }}/ansible/files/auth_index.json') }}"
  uri:
    url: "{{ db_protocol }}://{{ db_host }}:{{ db_port }}/{{ db_auth }}"
    method: POST
    status_code: 200,201
    body_format: json
    body: "{{ auth_index }}"
    user: "{{ db_username }}"
    password: "{{ db_password }}"
    force_basic_auth: yes
  when: result.status == 404

- name: recreate necessary "auth" keys
  vars:
    key: "{{ lookup('file', 'files/auth.{{ item }}') }}"
  uri:
    url: "{{ db_protocol }}://{{ db_host }}:{{ db_port }}/{{ db_auth }}"
    method: POST
    status_code: 200,201
    body_format: json
    body: >
          {
            "_id": "{{ item }}",
            "subject": "{{ item }}",
            "uuid": "{{ key.split(":")[0] }}",
            "key": "{{ key.split(":")[1] }}"
          }
    user: "{{ db_username }}"
    password: "{{ db_password }}"
    force_basic_auth: yes
  with_items: "{{ db.authkeys }}"
  when: result.status == 404
