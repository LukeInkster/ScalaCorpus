#!/usr/bin/env python

#
# Copyright 2015-2016 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Determine if some component of wsk is alive
# Returns 0 if it is up and otherwise the last error code from the service.

import os
import sys
import subprocess
import argparse
import monitorUtil

# wskprop is in the sibling directory
scriptDir = sys.path[0]
rootDir = os.path.dirname(os.path.dirname(scriptDir))
cliDir = os.path.join(os.path.join(rootDir, "tools"), "cli")
sys.path.insert(1, cliDir)
from wskprop import *



def getProp(key) :
    try:
        return whiskprops[key]
    except KeyError:
        print 'Could not find %s' % key
        return False

def getHostWithPort(hostComp, portComp, failIfNotFound = True):
    host = getProp(hostComp.upper()+'_HOST')
    tmp = getProp(portComp.upper()+'_HOST_PORT')
    port = tmp if type(host) is str and ':' not in host else ''
    if host != False and port != False:
        return (host + ':' + port) if (port != '') else host
    elif failIfNotFound:
        print "Unknown component {0}".format(hostComp)
        exit(-1)
    else:
        return False
    return host + ':' + port

def getInvokerHostAndPort(component, host = None, failIfNotFound = True):
    comp = component.upper()
    instance = int(comp[7:])
    if (host == None):
        hosts = getProp('INVOKER_HOSTS').split(',')
        host = hosts[instance]
    port = str(int(getProp('INVOKER_HOSTS_BASEPORT'))+instance)
    print host + ':' + port
    return host + ':' + port

def getHostAndPort(component, host = None, failIfNotFound = True):
    if (component.upper().find("INVOKER") == 0):
        return getInvokerHostAndPort(component, host, failIfNotFound)
    return getHostWithPort(component, component, failIfNotFound)

def ping(host_port) :
    cmd = ['curl', '-m', '3', '-s', '-X', 'GET', '%s/ping' % host_port]
    okString = 'pong'
    return monitorUtil.outputChecker(cmd, okString, 1)

def isDockerRegistryAlive() :
    host = getProp('WHISK_DOCKER_REGISTRY')
    cmd = ['curl', '-m', '3', '-s', '-X', 'GET', '%s:5000/v2/' % host]
    okString = '{}'
    return monitorUtil.outputChecker(cmd, okString, 1)

def isElkAlive() :
    host_port = getHostAndPort('elk')
    cmd = ['curl', '-s', '-S', '-m', '3', '%s' % host_port ]
    okString = '"cluster_name"'
    return monitorUtil.outputChecker(cmd, okString, 1)

def isKafkaAlive() :
    host_port = getHostWithPort('kafka', 'kafkaras')
    # ping signals monitor itself is alive; ready signals kafka is alive
    cmd = ['curl', '-m', '3', '-s', '-X', 'GET', '%s/ready' % host_port]
    okString = '{"msg":"yes"}'
    return monitorUtil.outputChecker(cmd, okString)

def isConsulAlive() :
    host = getProp('CONSULSERVER_HOST')
    port = getProp('CONSUL_HOST_PORT4')
    cmd = ['curl', '-m', '3', '-s', '-X', 'PUT', '-d', 'true', '%s:%s/v1/kv/consulIsAlive' % (host, port)]
    okString = 'true'
    rc = monitorUtil.outputChecker(cmd, okString, 1)
    if rc == 0:
      #delete temp property again
      cmd = ['curl', '-m', '3', '-s', '-X', 'DELETE', '%s:%s/v1/kv/consulIsAlive' % (host, port)]
      monitorUtil.run(cmd)
    return rc

def isZookeeperAlive() :
    host_port = getHostAndPort('zookeeper').split(':')
    cmd = ['nc', '-w', '3', host_port[0], host_port[1]]
    okString = 'imok'
    (rc, output) = monitorUtil.run(cmd, 'ruok')
    if (rc != 0):
        print 'isZooKeeperAlive: still waiting for zookeeper (nc failed with %d: %s)' % (rc, output)
        return rc
    if (output == okString):
        return 0
    else:
        print 'isZooKeeperAlive: Unexpected output string to imok query %s' % output
        return -2

parser = argparse.ArgumentParser(description='Check if a whisk component is alive or wait until it is.')
parser.add_argument('component', help='check if the given component is alive: elk')
parser.add_argument('--wait', help='check for this many seconds')
parser.add_argument('--host', help='check for component at this host')
parser.add_argument('-d','--dir', help='directory for whisk.properties')
args = parser.parse_args()

if (args.dir is None):
    print 'Must specify directory with -d'
    exit(-1)

whiskprops = importPropsIfAvailable(propfile(args.dir))

if (args.wait is None):
    delay = 0
else:
    delay = int(args.wait)

if (args.component == 'docker.registry'):
    monitorUtil.checkLoop(args.component, isDockerRegistryAlive, delay)
elif (args.component == 'elk'):
    monitorUtil.checkLoop(args.component, isElkAlive, delay)
elif (args.component == 'kafka'):
    monitorUtil.checkLoop(args.component, isKafkaAlive, delay)
elif (args.component == 'zookeeper'):
    monitorUtil.checkLoop(args.component, isZookeeperAlive, delay)
elif (args.component == 'consulserver'):
    monitorUtil.checkLoop(args.component, isConsulAlive, delay)
else:
    host_port = getHostAndPort(args.component, args.host)
    monitorUtil.checkLoop(args.component, lambda : ping(host_port), delay)
