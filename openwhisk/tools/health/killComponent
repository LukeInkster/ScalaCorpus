#!/usr/bin/env python

#
# Copyright 2015-2016 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Kill some component of wsk by stopping its docker container
# Returns 0 if it is up and otherwise the last error code from the service.

import os
import sys
import subprocess
import argparse

scriptDir = sys.path[0]
openDir = os.path.dirname(os.path.dirname(scriptDir))
cliDir = os.path.join(os.path.join(openDir, "tools"), "cli")
sys.path.insert(1, cliDir)

healthDir = os.path.join(os.path.join(openDir, "tools"), "health")
sys.path.insert(1, healthDir)

from wskprop import *
import monitorUtil

whiskprops = importPropsIfAvailable(propfile(scriptDir))

parser = argparse.ArgumentParser(description='Kill some whisk component by stopping its container.')
parser.add_argument('component', help='name of component to kill: elk, kafka, ...')
args = parser.parse_args()
component = args.component

componentToDocker = { 'elk'             : 'ELK_DOCKER_ENDPOINT',
                      'kafka'           : 'KAFKA_DOCKER_ENDPOINT',
                      'zookeeper'       : 'KAFKA_DOCKER_ENDPOINT',
                      'loadbalancer'    : 'MAIN_DOCKER_ENDPOINT',
                      'controller'      : 'MAIN_DOCKER_ENDPOINT',
                      'invokers'        : 'INVOKER_HOSTS',
                      'cloudanttrigger' : 'CATALOG_DOCKER_ENDPOINT'
                    }

isInvoker = component.find('invoker') == 0
invokerCount = int(component[7:]) if isInvoker else -1 # 0-based

try:
   docker = componentToDocker['invokers' if isInvoker else component]
except KeyError:
   print "Unknown component:", component
   exit(-1)

try:
   dockerEndpoint = whiskprops[docker]
   if (isInvoker):
       dockerEndpoint = dockerEndpoint.split(',')[invokerCount] + ':4243'
except KeyError:
   print 'Could not locate docker endpoint ', docker
   exit(-2)

print "component      = ", component
print "docker         = ", docker
print "dockerEndpoint = ", dockerEndpoint

(rc,output) = monitorUtil.run(["docker", "--host", dockerEndpoint, "stop", component]);
if (rc == 0):
    print "Stopped container for component ", component
    exit(0)
else:
    print output
    exit(rc)
