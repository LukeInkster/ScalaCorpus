#!/usr/bin/env python

#
# Copyright 2015-2016 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# >>>>> If this script is moved, the path manipulation needs to be adjusted.  See below. <<<<<
#
# Usage:
#   deployInvoker                 deploy all invokers from INVOKER_HOSTS
#   deployInvoker index host      deploy an invoker with the given index on the given host
#   deployInvoker --kill ...      kill rather than deploy
# Returns:
#  0                     if all were deployed successfully
#  >0                    a count of failed deploys
#
# A pull, teardown, and isAlive check is performed as well.
# The script is synchronous and will not return until deployment has completed.
# The list of invoker hosts is obtained from the Whisk property file.
#

# Start with standard imports.
import os
import sys
import subprocess
import argparse
import time
import json

# ************************************************************************************
# * Path stuff. If this script is moved, it should be enough to adjust blueDir only. *
# ************************************************************************************
scriptDir = sys.path[0]
rootDir = os.path.dirname(os.path.dirname(scriptDir))
cliDir = os.path.join(os.path.join(rootDir, "tools"), "cli")
sys.path.insert(1, cliDir)

healthDir = os.path.join(os.path.join(rootDir, "tools"), "health")
sys.path.insert(1, healthDir)

isAlive = os.path.join(rootDir, 'tools/health/isAlive')

# After path adjusted, do the reamining imports.
import wskprop
from monitorUtil import run
from dockerUtil import runDocker

# Use wskprop to read in whisk.properties and provide our own lookup
def getProp(whiskprops, key, defaultValue = None) :
    try:
        return whiskprops[key]
    except KeyError:
        if (defaultValue == None):
          print 'Could not find %s' % key
        return defaultValue


def killInvoker(whiskprops,index, invokerHost):
    dockerPort = getProp(whiskprops,'DOCKER_PORT')
    dockerTlsCmd = getProp(whiskprops,'DOCKER_TLS_CMD', '')
    dockerEndpoint = invokerHost + ":" + dockerPort

    invokerName = "invoker" + str(index)
    killCmd = ['rm', '-f', invokerName]

    print 'Removing', invokerName, '       at', dockerEndpoint,
    (elapsed, rc, output) = runDocker(dockerEndpoint, dockerTlsCmd, killCmd)
    if (rc == 0):
        print '   ', elapsed, 'sec   SUCCEEDED'
    elif (rc == 1):
        print '   ', elapsed, 'sec   did nothing'
    else:
        print '   ', elapsed, 'sec   FAILED', rc
        return rc

def getImageId(inspectOutput):
    records = json.loads(inspectOutput)
    return records[0]['Image']

# utility function to pull an image given the docker registry, the name and the tag of the image
# and the docker endpoint where the image is pulled
def pullImage(dockerRegistry, imageName, tag, dockerEndpoint, dockerTlsCmd):
    image = dockerRegistry + imageName + ":" + tag

    print 'Pulling ' + image + ' image at', dockerEndpoint,
    (elapsed, rc, output) = runDocker(dockerEndpoint, dockerTlsCmd, ['pull', image])
    if (rc == 0):
        print '   ', elapsed, 'sec   SUCCEEDED'
    else:
        print '   ', elapsed, 'sec   FAILED', rc
        print output
    return rc

#
# Pulls images for action containers to invoker host.
#
# Return 0 on success or the non-zero error code of a failed command.
#
def pullActionContainerImages(whiskprops, invokerHost, tag):
    dockerPort = getProp(whiskprops,'DOCKER_PORT')
    dockerRegistry = getProp(whiskprops,'DOCKER_REGISTRY', '')
    dockerTlsCmd = getProp(whiskprops,'DOCKER_TLS_CMD', '')
    dockerEndpoint = invokerHost + ":" + dockerPort

    # a list with the images to be pulled
    imagesToPull = [
        'whisk/dispatcher',
        'whisk/nodejsaction',
        'whisk/nodejs6action',
        'whisk/pythonaction',
        'whisk/swiftaction',
        'whisk/swift3action',
        'whisk/javaaction'
    ]

    if (dockerRegistry != ''):
        for image in imagesToPull:
            rc = pullImage(dockerRegistry, image, tag, dockerEndpoint, dockerTlsCmd)
            if (rc != 0):
                return rc
    else:
        print 'Skipping pull'
    return 0

#
# Teardown and start up an invoker.
# Will pull the image whisk/dispatcher first.
# Will check that it's really up with isAlive.
#
# Return 0 on success or the non-zero error code of a failed command.
# If all commands are successful but isAlive still says it's not up, then -1.
#
def startInvoker(whiskprops,index, invokerHost, tag):
    whiskLogsDir = getProp(whiskprops,'WHISK_LOGS_DIR')
    invokerHostsBaseport = int(getProp(whiskprops,'INVOKER_HOSTS_BASEPORT'))
    invokerDockerPort = getProp(whiskprops,'INVOKER_DOCKER_PORT')
    dockerPort = getProp(whiskprops,'DOCKER_PORT')
    dockerEndpoint = invokerHost + ":" + dockerPort
    dockerRegistry = getProp(whiskprops,'DOCKER_REGISTRY', '')
    dockerTlsCmd = getProp(whiskprops,'DOCKER_TLS_CMD', '')
    dockerTimezoneMount = getProp(whiskprops,'DOCKER_TIMEZONE_MOUNT', '')
    consulserverHost = getProp(whiskprops,'CONSULSERVER_HOST')
    consulHostPort4 = getProp(whiskprops,'CONSUL_HOST_PORT4')

    pullActionContainerImages(whiskprops, invokerHost, tag)

    image = dockerRegistry + "whisk/dispatcher" + ":" + tag
    invokerName = "invoker" + str(index)
    invokerPort = invokerHostsBaseport + index
    timezone = dockerTimezoneMount.split(' ') if dockerTimezoneMount != '' else []
    runCmd = ['run'] + timezone + [
        '-p', str(invokerPort) + ':' + str(invokerDockerPort),
        '-e', 'PORT=' + invokerDockerPort,
        '-e', 'CONSULSERVER_HOST=' + consulserverHost,
        '-e', 'CONSUL_HOST_PORT4=' + consulHostPort4,
        '-e', 'SELF_DOCKER_ENDPOINT=' + dockerEndpoint,
        '-e', 'COMPONENT_NAME=' + invokerName,
        '-e', 'SERVICE_NAME=' + invokerName,
        '-e', 'SERVICE_CHECK_HTTP=/ping',
        '-e', 'SERVICE_CHECK_TIMEOUT=2s',
        '-e', 'SERVICE_CHECK_INTERVAL=15s',
        '-v', whiskLogsDir + '/' + invokerName + ':/logs',
        '-v', '/var/lib/docker/containers/:/containers',
        '-h', invokerName,
        '--name', invokerName,
        '-d', image, '/dispatcher/bin/dispatcher', 'invoker', str(index)]

    print 'Starting', invokerName, '       at', dockerEndpoint,
    (elapsed, rc, output) = runDocker(dockerEndpoint, dockerTlsCmd, runCmd)
    containerId = output.strip()
    if (rc == 0):
        print '   ', elapsed, 'sec   SUCCEEDED'
    else:
        print '   ', elapsed, 'sec   FAILED', rc, '\n', output
        return rc

    print 'Container', containerId[0:16], 'at', dockerEndpoint,
    (elapsed, rc, output) = runDocker(dockerEndpoint, dockerTlsCmd, ['inspect', containerId])
    if (rc == 0):
        print '   ', elapsed, 'sec   SUCCEEDED'
        imageId = getImageId(output)
        print '  has imageId  ', imageId
    else:
        print '   ', elapsed, 'sec   FAILED', rc
        print output
        return rc
    return 0

def waitInvoker(whiskprops, index, host = None):
    invokerName = "invoker" + str(index)
    isAliveCmd = [isAlive, '-d', rootDir, '--wait', '15', invokerName]

    if (host != None):
        isAliveCmd = isAliveCmd + ['--host', host]
    print 'Checking', invokerName,

    start = time.time()
    (rc, output) = run(isAliveCmd)
    elapsed = round((time.time() - start) * 10) / 10

    if (rc == 0 and output.find('alive')):
        print '                                             ', elapsed, 'sec   SUCCEEDED\n', output,
        return True
    else:
        print '                                             ', elapsed, 'sec   FAILED\n', 'return code =', rc, '\n', output,
        return False

#
# A list of triples of the form (N, endpoint, adhoc) which will cause invoke_N to deploy there.
# The adhoc flag indicates that the endpoint was not derived from whisk property.
#
def deploy(whiskprops, invokerHostTriples, args):
    print 'The invoker hosts are', invokerHostTriples

    totalStart = time.time()
    failedTriples = []

    for (index, invokerHost, adhoc) in invokerHostTriples:
        if args.kill:
            killInvoker(whiskprops, index, invokerHost)
        elif args.pull:
            pullActionContainerImages(whiskprops, invokerHost, args.tag)
        else:
            killInvoker(whiskprops, index, invokerHost)
            startInvoker(whiskprops, index, invokerHost, args.tag)

    if not (args.kill or args.pull):
        for (index, invokerHost, adhoc) in invokerHostTriples:
            if (not(waitInvoker(whiskprops, index, invokerHost if adhoc else None))) :
                failedTriples.append((index, invokerHost, adhoc))

    elapsed = round((time.time() - totalStart) * 10) / 10
    return (elapsed, failedTriples)

# Convert the list of strings to one of integers - returning None if failed
def asInts(strs):
    result = []
    for s in strs:
      try:
          result.append(int(s))
      except ValueError:
          return None
    return result

# ---------------- Main ------------------------------
# ------------ use argsParse and normalize this? -----

parser = argparse.ArgumentParser(description='Invoker deployment')
parser.add_argument('-d','--dir', help='directory for whisk.properties')
parser.add_argument('--host', help='host on which to deploy')
parser.add_argument('-i','--index', help='index of the invoker to deploy')
parser.add_argument('-t','--tag', help='docker image tag to deploy')
parser.add_argument('-k', '--kill', action='store_true', help='kills invoker rather than deploy')
parser.add_argument('-p', '--pull', action='store_true', help='pulls activation container images to invoker host rather than deploy')
parser.set_defaults(kill=False)
args = parser.parse_args()

if (args.dir is None):
    print 'Must specify directory with -d'
    exit(-1)

if (args.tag is None):
    print 'Using docker image tag: latest'
    args.tag = "latest"

whiskprops = wskprop.importPropsIfAvailable(wskprop.propfile(args.dir))


if (args.host != None):
    invokerHostTriples = [(args.index, args.host, kill)]
else:
    invokerHostsString = getProp(whiskprops,'INVOKER_HOSTS')
    invokerHosts = invokerHostsString.split(",")
    invokerHostTriples = zip(range(0, len(invokerHosts)), invokerHosts, [False] * len(invokerHosts))

# Deploy (or just kill) all invokers
curTriples = invokerHostTriples
failedTriples = []
for iteration in (0, 3):
    if (iteration > 0):
        print 'Retrying', iteration

    (elapsed, failedTriples) = deploy(whiskprops, curTriples, args)
    print '\nTried to', ('kill' if args.kill else 'deploy'), len(curTriples), 'invokers.',
    if (len(failedTriples) == 0):
        print 'All done in', elapsed, 'sec.'
        sys.exit(0)
    else:
        print 'Failed to process', len(failedTriples), 'invokers in', elapsed, 'sec.'
        curTriples = failedTriples

sys.exit(len(failedTriples))
