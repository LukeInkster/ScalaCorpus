chapter errorhandling #[

  header #[ ]#
  example option #[ 

trait Option[+A]
case class Some[+A](get: A) extends Option[A]
case object None extends Option[Nothing]

]#

header #[
trait Option[+A] {
]#

  question map #[
    prompt #[ 
  def map[B](f: A => B): Option[B] = ]#

    hint #[ Try pattern matching on `this`. ]#

    hint #[ 
    this match {
      case None => None
      case Some(a) => ??
    } 
    ]#

    answer #[
    this match {
      case None => None
      case Some(a) => Some(f(a))
    }
    ]#

    explanation #[ 
      When implementing functions on ADTs, it's very common to 
      pattern match and provide a way to handle each data constructor. 
    ]#
  ]#

  question getOrElse #[
    prompt #[
  def getOrElse[B>:A](default: => B): B = ]#

    answer #[
    this match {
      case None => default
      case Some(a) => a
    }
    ]#
  ]#

  question flatMap #[
    prompt #[
  def flatMap[B](f: A => Option[B]): Option[B] = ]#

    hint #[
      This can be implemented using pattern matching on `this`. It can also be 
      written using only `map` and `getOrElse`. 
    ]#

    answer #[
    this map f getOrElse None
    ]#

    explanation #[
    This could be implemented with pattern matching as well: 

    ~~~ scala
    def flatMap[B](f: A => Option[B]): Option[B] = 
      this match {
        case None => None
        case Some(a) => f(a)
      }
    ~~~
    ]#
  ]#

  question isDefined #[
    answer #[
  def isDefined: Boolean = this match {
    case None => false
    case _ => true
  }
    ]#
  ]#

  footer #[
} 
case object None extends Option[Nothing]
case class Some[+A](get: A) extends Option[A]
  ]#

]#
