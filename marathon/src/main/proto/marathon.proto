//
// protoc --java_out=src/main/java/ --proto_path=/path/to/mesos/include/mesos/ --proto_path=src/main/proto/ src/main/proto/marathon.proto
//
package mesosphere.marathon;

option java_package = "mesosphere.marathon";
option java_outer_classname = "Protos";

import "mesos/mesos.proto";

message Constraint {
  required string field = 1;
  enum Operator {
      // Field must be unique across all tasks.
      UNIQUE = 0;
      // Field must match the regex given by value.
      LIKE = 1;
      // Tasks will be clustered, i.e. all tasks need to have the same value. If value is not set, any value will be
      // accepted for the first task, and subsequent tasks must use that same value.
      CLUSTER = 2;
      // Tasks will be grouped by field. Value specifies the minimum size of each group.
      GROUP_BY = 3;
      // Field must not match the regex given by value.
      UNLIKE = 4;
      // Field will be grouped by field. Value specifies the maximum size of each group.
      MAX_PER = 5;
  }
  required Operator operator = 2;
  optional string value = 3;
}

message HealthCheckDefinition {
  enum Protocol {
    HTTP = 0;
    TCP = 1;
    COMMAND = 2;
    HTTPS = 3;
  }
  required Protocol protocol = 1;
  optional uint32 portIndex = 2;
  optional uint32 gracePeriodSeconds = 3 [default = 15];
  optional uint32 intervalSeconds = 4 [default = 10];
  optional uint32 timeoutSeconds = 5 [default = 20];
  optional string path = 6 [default = "/"]; // used for HTTP only
  optional uint32 maxConsecutiveFailures = 7 [default = 3];
  optional mesos.CommandInfo command = 8;
  optional bool ignoreHttp1xx = 9 [default = false];
  optional uint32 port = 10;
}

message ReadinessCheckDefinition {
  enum Protocol {
    HTTP = 0;
    HTTPS = 1;
  }
  optional string name = 1;
  optional Protocol protocol = 2;
  optional string path = 3;
  optional string portName = 4;

  optional uint64 intervalMillis = 5;
  optional uint64 timeoutMillis = 6;

  repeated uint32 httpStatusCodeForReady = 7;
  optional bool preserveLastResponse = 8;
}

message IpAddress {
  repeated string groups = 1;
  repeated mesos.Label labels = 2;
  optional DiscoveryInfo discoveryInfo = 3;
  optional string networkName = 4;
}

message DiscoveryInfo {
  repeated mesos.Port ports = 1;
}

message ServiceDefinition {
  required string id = 1;
  required mesos.CommandInfo cmd = 2;
  required uint32 instances = 3;
  repeated mesos.Resource resources = 4;
  optional string description = 5;
  repeated uint32 ports = 6;
  repeated Constraint constraints = 7;
  required string executor = 8 [default = ""];
  // optional double taskRateLimit = 9 [default = 1];
  optional ContainerInfo OBSOLETE_container = 10;
  optional string version = 11 [default = "1970-01-01T00:00:00.000Z"]; //a version is required since version 0.5
  repeated HealthCheckDefinition healthChecks = 12;
  optional int64 backoff = 13 [default = 1000]; // stored as Millis
  optional double backoffFactor = 14 [default = 1.15];
  optional UpgradeStrategyDefinition upgradeStrategy = 15;
  repeated string dependencies = 16;
  repeated string storeUrls = 17;
  optional bool require_ports = 18 [default = false];
  optional ExtendedContainerInfo container = 19;
  repeated mesos.Parameter labels = 20;
  optional int64 maxLaunchDelay = 21 [default = 3600000]; // stored as Millis
  optional ResourceRoles acceptedResourceRoles = 22;
  optional int64 last_scaling_at = 23;
  optional int64 last_config_change_at = 24;
  optional IpAddress ipAddress = 25;
  optional ResidencyDefinition residency = 26;
  repeated mesos.Port portDefinitions = 27;
  repeated ReadinessCheckDefinition readinessCheckDefinition = 28;
  repeated Secret secrets = 29;
  repeated EnvVarReference envVarReferences = 30;
  optional int64 taskKillGracePeriod = 31; // stored as Millis
}

message ResourceRoles {
  repeated string role = 1;
}

message MarathonTask {
  message Reservation {
    message State {
      enum Type {
        New = 1;
        Launched = 2;
        Suspended = 3;
        Garbage = 4;
        Unknown = 5;
      }
      message Timeout {
        enum Reason {
          RelaunchEscalationTimeout = 1;
          ReservationTimeout = 2;
        }

        required int64 initiated = 1;
        required int64 deadline = 2;
        required Reason reason = 3;
      }
      required Type type = 1;
      optional Timeout timeout = 2;
    }

    repeated string local_volume_ids = 1;
    required State state = 2;
  }

  required string id = 1;
  optional string host = 2;
  repeated uint32 ports = 3;
  repeated mesos.Attribute attributes = 4;
  optional int64 staged_at = 5;
  optional int64 started_at = 6;
  repeated mesos.TaskStatus OBSOLETE_statuses = 7;
  optional string version = 8 [default = "1970-01-01T00:00:00.000Z"]; // since 0.7.0
  optional mesos.TaskStatus status = 9;
  optional mesos.SlaveID slaveId = 10;
  repeated mesos.NetworkInfo OBSOLETE_networks = 11; // status already contained this, so this field was redundant
  optional Reservation reservation = 12; // since 0.16, a list of volumes can be associated with the task ID
}

message MarathonApp {
  optional string name = 1;
  repeated MarathonTask tasks = 2;
}

message ContainerInfo {
  required bytes image = 1 [default = ""];
  repeated bytes options = 2;
}

// Copied from mesos.proto and adjusted to meet the needs for persistent volumes
// Extends DockerInfo.PortMapping to include `service_port`.
message ExtendedContainerInfo {

  message DockerInfo {

    required string image = 1;

    optional mesos.ContainerInfo.DockerInfo.Network network = 2 [default = HOST];

    message PortMapping {
      optional uint32 host_port = 1;
      required uint32 container_port = 2;
      optional string protocol = 3;
      optional string name = 4;
      repeated mesos.Label labels = 5;
      optional uint32 service_port = 100 [default = 0];
    }

    repeated PortMapping port_mappings = 3;

    optional bool privileged = 4 [default = false];

    // Allowing arbitrary parameters to be passed to docker CLI.
    // Note that anything passed to this field is not guaranteed
    // to be supported moving forward, as we might move away from
    // the docker CLI.
    repeated mesos.Parameter parameters = 5;

    // With this flag set to true, the docker containerizer will
    // pull the docker image from the registry even if the image
    // is already downloaded on the slave.
    optional bool force_pull_image = 6;
  }

  required mesos.ContainerInfo.Type type = 1;
  repeated Volume volumes = 2;

  optional DockerInfo docker = 3;
}

// Copied from mesos.proto and adjusted to meet the needs of persistent volumes
// Describes a volume mapping either from host to container or vice
// versa. Both paths can either refer to a directory or a file.
message Volume {

  // Defining properties of persistent volumes
  message PersistentVolumeInfo {
    required uint64 size = 1;
  }

  // Defining properties of external volumes
  message ExternalVolumeInfo {
    optional uint64 size = 1;
    required string name = 2;
    required string provider = 3;
    repeated mesos.Label options = 4;
  }

  required mesos.Volume.Mode mode = 3;

  // Path pointing to a directory or file in the container. If the
  // path is a relative path, it is relative to the container work
  // directory. If the path is an absolute path, that path must
  // already exist.
  required string container_path = 1;

  // The following specifies the source of this volume. At most one of
  // the following should be set.

  // Absolute path pointing to a directory or file on the host or a
  // path relative to the container work directory.
  optional string host_path = 2;

  // The source of the volume is an Image which describes a root
  // filesystem which will be provisioned by Mesos.
  optional mesos.Image image = 4;

  // Defines a Persistent Volume; implies no hostPath or external.
  optional PersistentVolumeInfo persistent = 5;

  // Defines an External Volume; implies no hostPath or persistent.
  optional ExternalVolumeInfo external = 6;
}

message EventSubscribers {
  repeated string callback_urls = 1;
}

message StorageVersion {
  required uint32 major = 1;
  required uint32 minor = 2;
  required uint32 patch = 3;
}

message UpgradeStrategyDefinition {
  required double minimumHealthCapacity = 1;
  optional double maximumOverCapacity = 2 [default = 1.0];;
}

message GroupDefinition {
  required string id = 1;
  required string version = 2;
  repeated ServiceDefinition apps = 3;
  repeated GroupDefinition groups = 4;
  repeated string dependencies = 5;
}

message DeploymentPlanDefinition {
  required string id = 1;
  required string version = 2;
  required GroupDefinition original = 4;
  required GroupDefinition target = 5;
}

message TaskFailure {
  required string app_id = 1;
  required mesos.TaskID task_id = 2;
  required mesos.TaskState state = 3;
  optional string message = 4 [default = ""];
  optional string host = 5 [default = ""];
  required string version = 6;
  required string timestamp = 7;
  optional mesos.SlaveID slaveId = 8;
}

/**
 * Describes a state entry, a versioned (via a UUID) key/value pair.
 * Copied from libmesos (src/messages/state.pro) to ensure
 * compatibility with ZooKeeperState from libmesos.
 */
message ZKStoreEntry {
  required string name = 1;
  required bytes uuid = 2;
  required bytes value = 3;

  // This flag indicates, if the byte array in value is gzip compressed
  // Introduced in Marathon 0.12
  // Optional to be backward compatible
  optional bool compressed = 4 [default = false];
}

message ResidencyDefinition {
  enum TaskLostBehavior {
    RELAUNCH_AFTER_TIMEOUT = 0;
    WAIT_FOREVER = 1;
  }

  optional int64 relaunchEscalationTimeoutSeconds = 1;
  optional TaskLostBehavior taskLostBehavior = 2;
}

message Secret {
  required string id = 1;
  required string source = 2;
}

message EnvVarReference {
  enum Type {
    UNKNOWN = 0;
    SECRET = 1;
  }

  required Type type = 1;
  required string name = 2;
  optional EnvVarSecretRef secretRef = 3;
}

message EnvVarSecretRef {
  required string secretId = 1;
}
